//
// Generated file, do not edit! Created by nedtool 5.6 from Packet.msg.
//

#ifndef __PACKET_M_H
#define __PACKET_M_H

#if defined(__clang__)
#pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION != OMNETPP_VERSION)
#error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

/**
 * Class generated from <tt>Packet.msg:1</tt> by nedtool.
 * <pre>
 * packet Packet
 * {
 *     \@customize(true);
 *     int header;
 *     string payload;
 *     char trailer;
 *     short frame_type;
 *     int ACK_nr;
 * }
 * </pre>
 *
 * Packet_Base is only useful if it gets subclassed, and Packet is derived from it.
 * The minimum code to be written for Packet is the following:
 *
 * <pre>
 * class Packet : public Packet_Base
 * {
 *   private:
 *     void copy(const Packet& other) { ... }

 *   public:
 *     Packet(const char *name=nullptr, short kind=0) : Packet_Base(name,kind) {}
 *     Packet(const Packet& other) : Packet_Base(other) {copy(other);}
 *     Packet& operator=(const Packet& other) {if (this==&other) return *this; Packet_Base::operator=(other); copy(other); return *this;}
 *     virtual Packet *dup() const override {return new Packet(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from Packet_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(Packet)
 * </pre>
 */
class Packet_Base : public ::omnetpp::cPacket
{
protected:
  int header;
  ::omnetpp::opp_string payload;
  char trailer;
  short frame_type;
  int ACK_nr;

private:
  void copy(const Packet_Base &other);

protected:
  // protected and unimplemented operator==(), to prevent accidental usage
  bool operator==(const Packet_Base &);
  // make assignment operator protected to force the user override it
  Packet_Base &operator=(const Packet_Base &other);

public:
  Packet_Base(const char *name = nullptr, short kind = 0);
  Packet_Base(const Packet_Base &other);
  virtual ~Packet_Base();
  virtual Packet_Base *dup() const override
  {
    return new Packet_Base(*this);
  }
  virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
  virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

  // field getter/setter methods
  virtual int getHeader() const;
  virtual void setHeader(int header);
  virtual const char *getPayload() const;
  virtual void setPayload(const char *payload);
  virtual char getTrailer() const;
  virtual void setTrailer(char trailer);
  virtual short getFrame_type() const;
  virtual void setFrame_type(short frame_type);
  virtual int getACK_nr() const;
  virtual void setACK_nr(int ACK_nr);
};

#endif // ifndef __PACKET_M_H
